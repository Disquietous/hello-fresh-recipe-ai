#!/usr/bin/env python3
"""
Quick Start Examples for Recipe Processing API
Simple, ready-to-run examples for immediate use
"""

import os
import sys
from pathlib import Path

# Add src to path for imports
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

try:
    from ingredient_pipeline import IngredientExtractionPipeline
except ImportError:
    print("Error: Cannot import IngredientExtractionPipeline")
    print("Make sure you're running from the project root directory")
    print("and that the src/ directory contains the pipeline module")
    sys.exit(1)

def quick_start_example():
    """Simplest possible example - just process an image"""
    print("üöÄ Quick Start Example")
    print("=" * 40)
    
    # Initialize the pipeline
    pipeline = IngredientExtractionPipeline()
    
    # For this example, we'll show what the code looks like
    print("# Initialize the pipeline")
    print("pipeline = IngredientExtractionPipeline()")
    print()
    print("# Process an image (replace with your image path)")
    print("result = pipeline.process_image('your_recipe_image.jpg')")
    print()
    print("# Display results")
    print("for ingredient in result['ingredients']:")
    print("    print(f\"{ingredient['quantity']} {ingredient['unit']} {ingredient['ingredient_name']}\")")
    
    # Show what a typical result looks like
    print("\nüìã Typical Result:")
    print("-" * 20)
    mock_ingredients = [
        "2 cups flour",
        "1 cup sugar", 
        "3 large eggs",
        "1/2 cup butter"
    ]
    
    for ingredient in mock_ingredients:
        print(f"‚Ä¢ {ingredient}")
    
    print(f"\n‚úÖ Found {len(mock_ingredients)} ingredients in 5.2 seconds")

def cookbook_example():
    """Example for processing cookbook pages"""
    print("\nüìö Cookbook Page Example")
    print("=" * 40)
    
    print("# Best settings for printed cookbook pages")
    print("result = pipeline.process_image(")
    print("    'cookbook_page.jpg',")
    print("    format_hint='cookbook',")
    print("    ocr_engine='tesseract',")
    print("    confidence_threshold=0.3")
    print(")")
    
    print("\nüí° Tips for cookbook pages:")
    print("‚Ä¢ Use 'tesseract' OCR engine for clean printed text")
    print("‚Ä¢ Set confidence threshold around 0.3")
    print("‚Ä¢ Expect high accuracy (85-95%)")
    print("‚Ä¢ Works best with high-contrast, well-lit images")

def handwritten_example():
    """Example for processing handwritten recipes"""
    print("\n‚úçÔ∏è Handwritten Recipe Example")
    print("=" * 40)
    
    print("# Best settings for handwritten recipes")
    print("result = pipeline.process_image(")
    print("    'handwritten_recipe.jpg',")
    print("    format_hint='handwritten',")
    print("    ocr_engine='easyocr',")
    print("    confidence_threshold=0.2,")
    print("    enable_preprocessing=True")
    print(")")
    
    print("\nüí° Tips for handwritten recipes:")
    print("‚Ä¢ Use 'easyocr' for better handwriting recognition")
    print("‚Ä¢ Lower confidence threshold (0.2) due to handwriting variability")
    print("‚Ä¢ Enable preprocessing for cleaner text")
    print("‚Ä¢ Expect lower confidence scores (40-70%)")
    print("‚Ä¢ Manual review recommended for critical recipes")

def digital_screenshot_example():
    """Example for processing digital screenshots"""
    print("\nüì± Digital Screenshot Example")
    print("=" * 40)
    
    print("# Best settings for app screenshots or digital recipes")
    print("result = pipeline.process_image(")
    print("    'recipe_screenshot.png',")
    print("    format_hint='digital',")
    print("    ocr_engine='paddleocr',")
    print("    confidence_threshold=0.4")
    print(")")
    
    print("\nüí° Tips for digital screenshots:")
    print("‚Ä¢ Use 'paddleocr' for modern digital fonts")
    print("‚Ä¢ Good accuracy expected (80-95%)")
    print("‚Ä¢ Watch out for UI elements (buttons, ads)")
    print("‚Ä¢ Consider cropping to ingredients section only")

def batch_processing_example():
    """Example for processing multiple images"""
    print("\nüì¶ Batch Processing Example")
    print("=" * 40)
    
    print("# Process multiple images at once")
    print("image_paths = [")
    print("    'recipe1.jpg',")
    print("    'recipe2.jpg',")
    print("    'recipe3.jpg'")
    print("]")
    print()
    print("results = []")
    print("for image_path in image_paths:")
    print("    try:")
    print("        result = pipeline.process_image(image_path)")
    print("        results.append(result)")
    print("        print(f'‚úÖ {image_path}: {len(result[\"ingredients\"])} ingredients')")
    print("    except Exception as e:")
    print("        print(f'‚ùå {image_path}: Error - {e}')")
    
    print("\nüí° Tips for batch processing:")
    print("‚Ä¢ Process images one by one for error handling")
    print("‚Ä¢ Save results as you go for large batches")
    print("‚Ä¢ Use appropriate settings for each image type")
    print("‚Ä¢ Consider using async processing for better performance")

def error_handling_example():
    """Example with proper error handling"""
    print("\nüõ°Ô∏è Error Handling Example")
    print("=" * 40)
    
    print("# Robust processing with error handling")
    print("def process_recipe_safely(image_path):")
    print("    try:")
    print("        # Check if file exists")
    print("        if not os.path.exists(image_path):")
    print("            return {'error': 'File not found'}")
    print()
    print("        # Process the image")
    print("        result = pipeline.process_image(image_path)")
    print()
    print("        # Validate results")
    print("        if not result.get('ingredients'):")
    print("            print('‚ö†Ô∏è No ingredients found - try lower confidence threshold')")
    print("            # Retry with lower threshold")
    print("            result = pipeline.process_image(image_path, confidence_threshold=0.1)")
    print()
    print("        return result")
    print()
    print("    except Exception as e:")
    print("        print(f'‚ùå Processing failed: {e}')")
    print("        return {'error': str(e)}")
    
    print("\nüí° Error handling tips:")
    print("‚Ä¢ Always check if files exist before processing")
    print("‚Ä¢ Implement retry logic with different settings")
    print("‚Ä¢ Validate results and handle empty responses")
    print("‚Ä¢ Log errors for debugging")

def api_usage_example():
    """Example using the REST API"""
    print("\nüåê API Usage Example")
    print("=" * 40)
    
    print("# Using the REST API with Python requests")
    print("import requests")
    print()
    print("# Start the API server first:")
    print("# uvicorn src.api.recipe_processing_api:app --host 0.0.0.0 --port 8000")
    print()
    print("# Process an image via API")
    print("with open('recipe.jpg', 'rb') as f:")
    print("    response = requests.post(")
    print("        'http://localhost:8000/process',")
    print("        files={'file': f},")
    print("        data={")
    print("            'format_hint': 'cookbook',")
    print("            'confidence_threshold': 0.3")
    print("        }")
    print("    )")
    print()
    print("if response.status_code == 200:")
    print("    result = response.json()")
    print("    print(f'Found {len(result[\"ingredients\"])} ingredients')")
    print("else:")
    print("    print(f'API Error: {response.status_code}')")
    
    print("\nüí° API usage tips:")
    print("‚Ä¢ Start the API server before making requests")
    print("‚Ä¢ Check response status codes")
    print("‚Ä¢ Handle rate limiting if processing many images")
    print("‚Ä¢ Use batch endpoints for multiple images")

def optimization_tips():
    """Performance optimization tips"""
    print("\n‚ö° Performance Optimization Tips")
    print("=" * 40)
    
    print("üñºÔ∏è Image Optimization:")
    print("‚Ä¢ Resize large images to 1500-2500px max dimension")
    print("‚Ä¢ Use good lighting and avoid blurry images")
    print("‚Ä¢ Crop to ingredients section if possible")
    print("‚Ä¢ Convert to JPEG for smaller file sizes")
    
    print("\nüîß Processing Optimization:")
    print("‚Ä¢ Choose the right OCR engine for your image type:")
    print("  - Tesseract: Clean printed text (cookbooks)")
    print("  - EasyOCR: Handwritten text, multiple languages")
    print("  - PaddleOCR: Digital text, mixed layouts")
    
    print("\n‚öôÔ∏è Configuration Optimization:")
    print("‚Ä¢ Lower confidence threshold for handwritten text")
    print("‚Ä¢ Enable preprocessing for poor quality images")
    print("‚Ä¢ Use format hints when you know the image type")
    print("‚Ä¢ Enable caching for repeated processing")

def troubleshooting_guide():
    """Common issues and solutions"""
    print("\nüîß Troubleshooting Guide")
    print("=" * 40)
    
    issues = [
        {
            'problem': 'No ingredients found',
            'solutions': [
                'Lower confidence threshold to 0.1',
                'Try different OCR engine',
                'Enable image preprocessing',
                'Check if image contains readable text'
            ]
        },
        {
            'problem': 'Low confidence scores',
            'solutions': [
                'Improve image quality (lighting, focus)',
                'Increase image resolution',
                'Try different OCR engine',
                'Enable preprocessing'
            ]
        },
        {
            'problem': 'Processing is slow',
            'solutions': [
                'Resize image to smaller dimensions',
                'Use faster OCR engine (tesseract)',
                'Enable caching',
                'Process in batches'
            ]
        },
        {
            'problem': 'Wrong ingredients detected',
            'solutions': [
                'Increase confidence threshold',
                'Use format hints',
                'Crop image to ingredients section',
                'Filter results manually'
            ]
        }
    ]
    
    for issue in issues:
        print(f"\n‚ùì Problem: {issue['problem']}")
        print("   Solutions:")
        for solution in issue['solutions']:
            print(f"   ‚Ä¢ {solution}")

def main():
    """Run all quick start examples"""
    print("üç≥ Recipe Processing API - Quick Start Examples")
    print("=" * 60)
    
    examples = [
        quick_start_example,
        cookbook_example,
        handwritten_example,
        digital_screenshot_example,
        batch_processing_example,
        error_handling_example,
        api_usage_example,
        optimization_tips,
        troubleshooting_guide
    ]
    
    for example_func in examples:
        try:
            example_func()
        except Exception as e:
            print(f"Error in {example_func.__name__}: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ Quick Start Examples Complete!")
    print("\nNext Steps:")
    print("1. Try processing your own recipe images")
    print("2. Experiment with different OCR engines and settings")
    print("3. Check out comprehensive_usage_examples.py for advanced features")
    print("4. Read the full documentation in docs/USAGE_GUIDE.md")
    print("=" * 60)

if __name__ == "__main__":
    main()